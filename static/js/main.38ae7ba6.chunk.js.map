{"version":3,"sources":["Calendar.js","DateFunctions.js","InputFields.js","Transaction.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","props","state","month","getMonth","selectedDate","year","getYear","inputYear","toString","changeYear","bind","value","newValue","this","setState","inputtedDate","Date","setFullYear","allDaysInMonth","date","startDate","startOfMonth","endDate","endOfMonth","eachDayOfInterval","start","end","getAllDaysInMonth","className","Grid","container","justify","spacing","item","xs","FormControl","Select","onChange","event","target","MenuItem","Button","onClick","thousandSeparator","allowNegative","decimalScale","isAllowed","values","floatValue","onValueChange","style","textAlign","height","width","itemSize","itemCount","length","index","changeSelectedDate","isSameDay","fontSize","isSunday","isMonday","isTuesday","isWednesday","isThursday","isFriday","isSaturday","getDate","getBudgetAmountOnDate","Math","abs","color","top","right","position","getAddTransactionsOnDate","bottom","getSubTransactionsOnDate","React","Component","InputFields","showChangeBudget","showAddTransaction","transactionDescription","currencyValue","isAdd","showBudgetError","showTransactionNameError","showTransactionValueError","changeBudget","addTransaction","closeAll","handleOutsideClick","e","node","contains","createNotification","toFixed","isValid","replace","addTransactionOnSelectedDate","document","addEventListener","removeEventListener","ref","marginRight","variant","marginLeft","opacity","prefix","placeholder","marginTop","borderColor","type","Radio","checked","Transaction","onAdd","deleteSelected","enableDeleteConfirm","disableDeleteConfirm","deleteTransaction","add","deleteTransactionOnSelectedDate","increases","map","description","decreases","Main","addDate","dates","saveStates","budget","now","resetModalOpen","closeResetModal","openResetModal","resetAllData","loadStates","localStorage","setItem","JSON","stringify","storedBudget","parse","getItem","storedDates","window","amount","getTime","i","indexDate","isBefore","j","dateEntry","newDate","dateIndex","newArray","title","message","NotificationManager","success","warning","error","info","val","getMonthName","Modal","open","onClose","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.38ae7ba6.chunk.js","sourcesContent":["import React from 'react'\nimport { getAllDaysInMonth, getDayOfWeekShortName } from './DateFunctions'\nimport { FixedSizeList as List } from 'react-window'\nimport { getDate, getMonth, getYear, isSameDay } from 'date-fns'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport NumberFormat from 'react-number-format'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport './Calendar.css'\n\nclass Calendar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            month: getMonth(this.props.selectedDate),\n            year: getYear(this.props.selectedDate),\n            inputYear : getYear(this.props.selectedDate).toString()\n        }\n\n        this.changeYear = this.changeYear.bind(this);\n    }\n\n    changeYear(value) {\n        var newValue = this.state.year + value;\n        if (newValue >= 0 && newValue < 10000)\n            this.setState({\n                year: newValue,\n                inputYear: newValue.toString()\n            });\n    }\n\n    render() {\n        var inputtedDate = new Date(this.state.year, this.state.month, 1);\n        inputtedDate.setFullYear(this.state.year);\n        \n        var allDaysInMonth = getAllDaysInMonth(inputtedDate);\n\n        return (\n            <>\n                <div className=\"CalendarListHeader\">\n                    <Grid container justify=\"center\" spacing={0}>\n                        <Grid item xs={6}>\n                            <FormControl>\n                                <Select value={this.state.month} onChange={(event) => this.setState({month: event.target.value})}>\n                                    <MenuItem value={0}>Janurary</MenuItem>\n                                    <MenuItem value={1}>Feburary</MenuItem>\n                                    <MenuItem value={2}>March</MenuItem>\n                                    <MenuItem value={3}>April</MenuItem>\n                                    <MenuItem value={4}>May</MenuItem>\n                                    <MenuItem value={5}>June</MenuItem>\n                                    <MenuItem value={6}>July</MenuItem>\n                                    <MenuItem value={7}>August</MenuItem>\n                                    <MenuItem value={8}>September</MenuItem>\n                                    <MenuItem value={9}>October</MenuItem>\n                                    <MenuItem value={10}>November</MenuItem>\n                                    <MenuItem value={11}>December</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button onClick={() => this.changeYear(-1)}>{'<'}</Button>\n                            <NumberFormat\n                                value={this.state.inputYear}\n                                thousandSeparator={false}\n                                allowNegative={false}\n                                decimalScale={0}\n                                isAllowed={(values => {return values.value === \"\" || values.floatValue < 10000;})}\n                                onValueChange={(values) => {\n                                this.setState({\n                                    year: values.floatValue > 0 ? values.floatValue : 0,\n                                    inputYear: values.value\n                                    });}\n                                }\n                                className=\"YearInput\"\n                            />\n                            <Button onClick={() => this.changeYear(1)}>{'>'}</Button>\n                        </Grid>\n                    </Grid>\n                    <br/>\n                    <Grid container justify=\"center\" spacing={0}>\n                        <Grid item xs={3} style={{textAlign: 'left'}}>\n                            Day of Month\n                        </Grid>\n                        <Grid item xs={7}>\n                            Budget Amount\n                        </Grid>\n                        <Grid item xs={2}>\n                            Transactions\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className=\"List\">\n                    <List\n                        height={500}\n                        width={500}\n                        itemSize={60}\n                        itemCount={allDaysInMonth.length}\n                    >\n                        {({ index, style }) => (\n                            <div style={style}\n                                 onClick={() => this.props.changeSelectedDate(allDaysInMonth[index])}\n                                 className={isSameDay(allDaysInMonth[index], this.props.selectedDate) ? \"CalendarListSelected\" : \"CalendarList\"}>\n                                     <Grid container justify=\"center\" spacing={0}>\n                                         <Grid item xs={2} style={{fontSize: 20, textAlign: 'left'}}>\n                                            {getDayOfWeekShortName(allDaysInMonth[index])}\n                                         </Grid>\n                                         <Grid item xs={1} style={{fontSize: 20}}>\n                                             {getDate(allDaysInMonth[index])}\n                                         </Grid>\n                                         <Grid item xs={7} style={{fontSize: 20}}>\n                                            {this.props.getBudgetAmountOnDate(allDaysInMonth[index]) < 0 ? '-' : ''}\n                                            ${Math.abs(this.props.getBudgetAmountOnDate(allDaysInMonth[index]))}\n                                         </Grid>\n                                         <Grid item xs={2}>\n                                             <div style={{color: '#2ecc71', fontSize: '20px', top: 0, right: 30, position: 'absolute'}}>\n                                                {this.props.getAddTransactionsOnDate(allDaysInMonth[index]).length > 0 ?\n                                                \"+\" + this.props.getAddTransactionsOnDate(allDaysInMonth[index]).length\n                                                : ''}\n                                             </div>\n                                             <div style={{color: '#c0392b', fontSize: '20px', bottom: 0, right: 30, textAlign: 'right', position: 'absolute'}}>\n                                                {this.props.getSubTransactionsOnDate(allDaysInMonth[index]).length > 0 ?\n                                                \"-\" + this.props.getSubTransactionsOnDate(allDaysInMonth[index]).length\n                                                : ''}\n                                             </div>\n                                         </Grid>\n                                     </Grid>\n                            </div>\n                        )}\n                    </List>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Calendar;","import { isSunday, isMonday, isTuesday, isWednesday, isThursday, isFriday, isSaturday, getMonth, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';\n\nexport const getDayOfWeekName = (date) => {\n\n    if (isSunday(date)) return 'Sunday';\n    else if (isMonday(date)) return 'Monday';\n    else if (isTuesday(date)) return 'Tuesday';\n    else if (isWednesday(date)) return 'Wednesday';\n    else if (isThursday(date)) return 'Thursday';\n    else if (isFriday(date)) return 'Friday';\n    else if (isSaturday(date)) return 'Saturday';\n    \n    return '';\n}\n\nexport const getDayOfWeekShortName = (date) => {\n    if (isSunday(date)) return 'SUN';\n    else if (isMonday(date)) return 'MON';\n    else if (isTuesday(date)) return 'TUES';\n    else if (isWednesday(date)) return 'WED';\n    else if (isThursday(date)) return 'THURS';\n    else if (isFriday(date)) return 'FRI';\n    else if (isSaturday(date)) return 'SAT';\n    \n    return '';\n}\n\nexport const getMonthName = (date) => {\n    let val = getMonth(date);\n\n    if (val === 0) return 'Janurary';\n    else if (val === 1) return 'Feburary';\n    else if (val === 2) return 'March';\n    else if (val === 3) return 'April';\n    else if (val === 4) return 'May';\n    else if (val === 5) return 'June';\n    else if (val === 6) return 'July';\n    else if (val === 7) return 'August';\n    else if (val === 8) return 'September';\n    else if (val === 9) return 'October';\n    else if (val === 10) return 'November';\n    else if (val === 11) return 'December';\n    \n    return '';\n}\n\nexport const getAllDaysInMonth = (date) => {\n    let startDate = startOfMonth(date);\n    let endDate = endOfMonth(date);\n\n    return eachDayOfInterval({ start: startDate, end: endDate });\n}","import React from 'react'\nimport NumberFormat from 'react-number-format'\nimport Radio from '@material-ui/core/Radio'\nimport Button from '@material-ui/core/Button'\nimport WarningIcon from '@material-ui/icons/Warning';\n\nimport './InputFields.css'\n\nclass InputFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showChangeBudget: false,\n            showAddTransaction: false,\n            transactionDescription: \"\",\n            currencyValue: null,\n            isAdd: true,\n            showBudgetError: false,\n            showTransactionNameError: false,\n            showTransactionValueError: false\n        };\n\n        this.changeBudget = this.changeBudget.bind(this);\n        this.addTransaction = this.addTransaction.bind(this);\n        this.showChangeBudget = this.showChangeBudget.bind(this);\n        this.showAddTransaction = this.showAddTransaction.bind(this);\n        this.closeAll = this.closeAll.bind(this);\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\n    }\n\n    handleOutsideClick(e) {\n        if (this.node.contains(e.target)) {\n            return;\n        }\n        \n        this.closeAll();\n    }\n\n    changeBudget() {\n        if (this.state.currencyValue == null || !this.state.currencyValue > 0)\n        {\n            this.setState({showBudgetError: true});\n            return;\n        }\n\n        this.props.changeBudget(this.state.currencyValue);\n        this.props.createNotification(\"success\", \"Initial Balance Changed\", \"Your initial balance has been changed to $\" + this.state.currencyValue.toFixed(2) + \"!\");\n        this.setState({currencyValue: null});\n        this.closeAll();\n    }\n\n    addTransaction() {\n        var isValid = true;\n        if (this.state.transactionDescription == null || this.state.transactionDescription.replace(/\\s/g,\"\") === \"\") {\n            isValid = false;\n            this.setState({showTransactionNameError: true});\n        }\n        else\n            this.setState({showTransactionNameError: false});\n        \n        if (this.state.currencyValue == null || !this.state.currencyValue > 0) {\n            isValid = false;\n            this.setState({showTransactionValueError: true});\n        }\n        else\n            this.setState({showTransactionValueError: false});\n        \n        if (!isValid)\n            return;\n\n        this.props.addTransactionOnSelectedDate(this.state.currencyValue, this.state.transactionDescription, this.state.isAdd);\n        this.props.createNotification(\"success\", \"Transaction Added\", \"Your transaction has been successfully added!\");\n        this.setState({transactionDescription: \"\", currencyValue: null, isAdd: true});\n        this.closeAll();\n    }\n\n    showChangeBudget() {\n        this.closeAll();\n        this.setState({showChangeBudget: true});\n\n        document.addEventListener('click', this.handleOutsideClick, false);\n    }\n\n    showAddTransaction() {\n        this.closeAll();\n        this.setState({showAddTransaction: true});\n\n        document.addEventListener('click', this.handleOutsideClick, false);\n    }\n\n    closeAll() {\n        this.setState({\n            transactionDescription: \"\",\n            currencyValue: null,\n            isAdd: true,\n            showChangeBudget: false,\n            showAddTransaction: false,\n            showBudgetError: false,\n            showTransactionNameError: false,\n            showTransactionValueError: false\n        });\n\n        document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    render() {\n        return (\n            <div ref={node => { this.node = node; }}>\n                <Button style={{marginRight: '10px'}} variant=\"contained\" onClick={this.showChangeBudget}>Change Initial Balance</Button>\n                <Button style={{marginLeft: '10px'}} variant=\"contained\" onClick={this.showAddTransaction}>Add Transaction</Button>\n                <div className=\"InputField\">\n                    {this.state.showChangeBudget ?\n                    <>\n                        Enter the value that you want your new initial budget to be.\n                        <br/>\n                        <WarningIcon style={{color: 'red', opacity: (this.state.showBudgetError ? 1 : 0)}}/>\n                        <NumberFormat\n                          value={this.state.currencyValue}\n                          thousandSeparator={true}\n                          allowNegative={false}\n                          prefix={'$'}\n                          placeholder=\"$0.00\"\n                          decimalScale={2}\n                          onValueChange={(values) => { this.setState({currencyValue: values.floatValue}); }}\n                          className=\"InputFieldInput\"\n                          style={{marginTop: '10px', borderColor: (this.state.showBudgetError ? 'red' : 'initial')}}\n                        />\n                        <br/>\n                        {this.state.showBudgetError ?\n                        <div style={{color: 'red'}}>Value must be greater than $0.</div>\n                        : ''}\n                        <Button style={{marginTop: '10px', marginRight: '10px'}} variant=\"contained\" color=\"secondary\" onClick={this.closeAll}>Cancel</Button>\n                        <Button style={{marginTop: '10px', marginLeft: '10px'}} variant=\"contained\" color=\"primary\" onClick={this.changeBudget}>Change</Button>\n                    </> : ''}\n                    {this.state.showAddTransaction ?\n                    <>\n                        Enter the name of your new transaction, its value, and if it should increase or decrease your overall budget.\n                        <br/>\n                        <WarningIcon style={{color: 'red', opacity: (this.state.showTransactionNameError ? 1 : 0)}}/>\n                        <input\n                          type=\"text\"\n                          className=\"InputFieldInput\"\n                          placeholder=\"Enter Name\"\n                          value={this.state.transactionDescription}\n                          onChange={(event) => this.setState({transactionDescription: event.target.value})}\n                          style={{marginTop: '10px', borderColor: (this.state.showTransactionNameError ? 'red' : 'initial')}}\n                        />\n                        <div style={{color: 'red'}}>\n                            {this.state.showTransactionNameError ?\n                            'Name field cannot be empty.' : ''}\n                        </div>\n                        <br/>\n                        <WarningIcon style={{color: 'red', opacity: (this.state.showTransactionValueError ? 1 : 0)}}/>\n                        <NumberFormat\n                          value={this.state.currencyValue}\n                          thousandSeparator={true}\n                          allowNegative={false}\n                          prefix={'$'}\n                          placeholder=\"$0.00\"\n                          decimalScale={2}\n                          onValueChange={(values) => { this.setState({currencyValue: values.floatValue}); }}\n                          className=\"InputFieldInput\"\n                          style={{borderColor: (this.state.showTransactionValueError ? 'red' : 'initial')}}\n                        />\n                        <div style={{color: 'red'}}>\n                            {this.state.showTransactionValueError ?\n                            'Value must be greater than $0.' : ''}\n                        </div>\n                        <div style={{marginTop: '10px'}}>\n                            <Radio\n                            checked={!this.state.isAdd}\n                            onChange={() => this.setState({isAdd: !this.state.isAdd})}\n                            value={false}\n                            /> Decreasing\n                            <Radio\n                            checked={this.state.isAdd}\n                            onChange={() => this.setState({isAdd: !this.state.isAdd})}\n                            value={true}\n                            /> Increasing\n                        </div>\n                        <br/>\n                        <Button style={{marginRight: '10px'}} variant=\"contained\" color=\"secondary\" onClick={this.closeAll}>Cancel</Button>\n                        <Button style={{marginLeft: '10px'}} variant=\"contained\" color=\"primary\" onClick={this.addTransaction}>Add</Button>\n                    </> : ''}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InputFields;","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport './Transaction.css'\n\nclass Transaction extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onAdd: true,\n            deleteSelected: -1\n        }\n\n        this.enableDeleteConfirm = this.enableDeleteConfirm.bind(this);\n        this.disableDeleteConfirm = this.disableDeleteConfirm.bind(this);\n        this.deleteTransaction = this.deleteTransaction.bind(this);\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\n    }\n\n    handleOutsideClick(e) {\n        if (this.node.contains(e.target)) {\n            return;\n        }\n        \n        this.disableDeleteConfirm();\n    }\n\n    enableDeleteConfirm(index, add) {\n        this.setState({onAdd: add, deleteSelected: index});\n        document.addEventListener('click', this.handleOutsideClick, false);\n    }\n\n    disableDeleteConfirm() {\n        this.setState({deleteSelected: -1});\n        document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    deleteTransaction(index, isAdd) {\n        this.props.deleteTransactionOnSelectedDate(index, isAdd);\n        this.props.createNotification('info', null, \"Your transaction has been removed.\");\n    }\n\n    render() {\n        return (\n            <div ref={node => { this.node = node; }}>\n                <b style={{fontSize: 20}}>Transactions</b>\n                <ul className=\"list\">\n                    {this.props.increases.map((item, index) => {\n                        return <>\n                            <li className=\"plus\">\n                                <Grid container justify=\"center\" spacing={0}>\n                                    <Grid item xs style={{textAlign: 'left'}}>\n                                        {item.description}\n                                    </Grid>\n                                    <Grid item xs style={{textAlign: 'right'}}>\n                                        +${item.value.toFixed(2)}\n                                        <button className=\"delete-btn\" onClick={() => this.enableDeleteConfirm(index, true)}>x</button>\n                                    </Grid>\n                                </Grid>\n                            </li>\n                            {index === this.state.deleteSelected && this.state.onAdd ? <>\n                                Are you sure you want to remove this transaction?\n                                <br/>\n                                <Button style={{marginTop: '10px', marginRight: '10px'}} variant=\"contained\" color=\"primary\" onClick={this.disableDeleteConfirm}>Cancel</Button>\n                                <Button style={{marginTop: '10px', marginLeft: '10px'}} variant=\"contained\" color=\"secondary\" onClick={() => this.deleteTransaction(index, true)}>Remove</Button>\n                            </> : ''}\n                        </>\n                    })}\n                    {this.props.decreases.map((item, index) => {\n                        return <>\n                            <li className=\"minus\">\n                                <Grid item xs style={{textAlign: 'left'}}>\n                                    {item.description}\n                                </Grid>\n                                <Grid item xs style={{textAlign: 'right'}}>\n                                    -${item.value.toFixed(2)}\n                                </Grid>\n                                <button className=\"delete-btn\" onClick={() => this.enableDeleteConfirm(index, false)}>x</button>\n                            </li>\n                            {index === this.state.deleteSelected && !this.state.onAdd ? <>\n                                Are you sure you want to remove this transaction?\n                                <br/>\n                                <Button style={{marginTop: '10px', marginRight: '10px'}} variant=\"contained\" color=\"primary\" onClick={this.disableDeleteConfirm}>Cancel</Button>\n                                <Button style={{marginTop: '10px', marginLeft: '10px'}} variant=\"contained\" color=\"secondary\" onClick={() => this.deleteTransaction(index, false)}>Remove</Button>\n                            </> : ''}\n                        </>\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Transaction;\n","import React from 'react'\nimport Calendar from './Calendar'\nimport InputFields from './InputFields'\nimport Transaction from './Transaction'\nimport { getMonthName } from './DateFunctions'\nimport { getYear, getDate, isBefore, isSameDay, getTime } from 'date-fns'\nimport Grid from '@material-ui/core/Grid'\nimport {NotificationContainer, NotificationManager} from 'react-notifications'\nimport Button from '@material-ui/core/Button'\nimport Modal from '@material-ui/core/Modal'\n\nimport './Main.css'\nimport 'react-notifications/lib/notifications.css';\n\nconst LOCAL_STORAGE_BUDGET_KEY = 'budgetCalendar.budget';\nconst LOCAL_STORAGE_DATES_KEY = 'budgetCalendar.dates';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            budget: 0,\n            selectedDate: Date.now(),\n            dates: [],\n            resetModalOpen: false\n        };\n\n        this.changeBudget = this.changeBudget.bind(this);\n        this.getBudgetAmountOnDate = this.getBudgetAmountOnDate.bind(this);\n        this.changeSelectedDate = this.changeSelectedDate.bind(this);\n        this.getAddTransactionsOnDate = this.getAddTransactionsOnDate.bind(this);\n        this.getSubTransactionsOnDate = this.getSubTransactionsOnDate.bind(this);\n        this.addTransactionOnSelectedDate = this.addTransactionOnSelectedDate.bind(this);\n        this.deleteTransactionOnSelectedDate = this.deleteTransactionOnSelectedDate.bind(this);\n        this.createNotification = this.createNotification.bind(this);\n        this.closeResetModal = this.closeResetModal.bind(this);\n        this.openResetModal = this.openResetModal.bind(this);\n        this.resetAllData = this.resetAllData.bind(this);\n        this.loadStates = this.loadStates.bind(this);\n    }\n\n    saveStates() {\n        localStorage.setItem(LOCAL_STORAGE_BUDGET_KEY, JSON.stringify(this.state.budget));\n        localStorage.setItem(LOCAL_STORAGE_DATES_KEY, JSON.stringify(this.state.dates));\n    }\n\n    loadStates() {\n        const storedBudget = JSON.parse(localStorage.getItem(LOCAL_STORAGE_BUDGET_KEY));\n        const storedDates = JSON.parse(localStorage.getItem(LOCAL_STORAGE_DATES_KEY));\n\n        if (storedBudget)\n            this.setState({budget: storedBudget});\n        if (storedDates)\n            this.setState({dates: storedDates});\n    }\n\n    componentDidMount() {\n        this.loadStates();\n\n        window.addEventListener(\n            \"beforeunload\",\n            this.saveStates.bind(this)\n        );\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            \"beforeunload\",\n            this.saveStates.bind(this)\n        );\n\n        this.saveStates();\n    }\n\n    addDate = (date) => {\n        this.setState((state, props) => ({\n            dates: [...this.state.dates, date]\n        }));\n        this.saveStates();\n    }\n\n    changeBudget(amount) {\n        this.setState({\n            budget: amount\n        });\n        this.saveStates();\n    }\n\n    changeSelectedDate(date) {\n        this.setState((state, props) => ({\n            selectedDate: getTime(date)\n        }));\n    }\n\n    getBudgetAmountOnDate(date) {\n        let amount = this.state.budget;\n\n        var i;\n        for (i = 0; i < this.state.dates.length; i++) {\n            let indexDate = this.state.dates[i];\n\n            if (isBefore(indexDate.date, date) || isSameDay(indexDate.date, date)) {\n                var j;\n                for (j = 0; j < indexDate.increases.length; j++) {\n                    amount += indexDate.increases[j].value;\n                }\n                for (j = 0; j < indexDate.decreases.length; j++) {\n                    amount -= indexDate.decreases[j].value;\n                }\n            }\n        }\n\n        return amount.toFixed(2);\n    }\n\n    getAddTransactionsOnDate(date) {\n        for (var i = 0; i < this.state.dates.length; i++)\n            if (isSameDay(date, this.state.dates[i].date))\n                return this.state.dates[i].increases;\n        \n        return [];\n    }\n\n    getSubTransactionsOnDate(date) {\n        for (var i = 0; i < this.state.dates.length; i++)\n            if (isSameDay(date, this.state.dates[i].date))\n                return this.state.dates[i].decreases;\n        \n        return [];\n    }\n\n    addTransactionOnSelectedDate(amount, description, isAdd) {\n        for (var i = 0; i < this.state.dates.length; i++)\n            if (isSameDay(this.state.selectedDate, this.state.dates[i].date))\n            {\n                var dateEntry;\n                if (isAdd)\n                {\n                    dateEntry = this.state.dates;\n                    dateEntry[i].increases = [...dateEntry[i].increases, {description: description, value: amount}];\n                    this.setState({dates: dateEntry});\n                }\n                else\n                {\n                    dateEntry = this.state.dates;\n                    dateEntry[i].decreases = [...dateEntry[i].decreases, {description: description, value: amount}];\n                    this.setState({dates: dateEntry});\n                }\n                return;\n            }\n\n        var newDate = { date: this.state.selectedDate, increases: [], decreases: [] };\n        if (isAdd)\n            newDate.increases = [{description: description, value: amount}];\n        else\n            newDate.decreases = [{description: description, value: amount}];\n        \n        this.addDate(newDate);\n        this.saveStates();\n    }\n\n    deleteTransactionOnSelectedDate(index, isAdd) {\n        var dateIndex;\n        for (var i = 0; i < this.state.dates.length; i++)\n            if (isSameDay(this.state.selectedDate, this.state.dates[i].date)) {\n                dateIndex = i;\n                break;\n            }\n        \n        if (dateIndex == null)\n            return;\n        \n        var dateEntry = this.state.dates;\n        var newArray = [];\n        if (isAdd) {\n            for (i = 0; i < dateEntry[dateIndex].increases.length; i++) {\n                if (i !== index) {\n                    newArray = [...newArray, dateEntry[dateIndex].increases[i]];\n                }\n            }\n            dateEntry[dateIndex].increases = newArray;\n        }\n        else {\n            for (i = 0; i < dateEntry[dateIndex].decreases.length; i++) {\n                if (i !== index) {\n                    newArray = [...newArray, dateEntry[dateIndex].decreases[i]];\n                }\n            }\n            dateEntry[dateIndex].decreases = newArray;\n        }\n\n        this.setState({dates: dateEntry});\n        this.saveStates();\n    }\n\n    createNotification(type, title, message) {\n        switch (type) {\n            case 'success':\n                NotificationManager.success(message, title);\n                break;\n            case 'warning':\n                NotificationManager.warning(message, title);\n                break;\n            case 'error':\n                NotificationManager.error(message, title);\n                break;\n            default:\n                NotificationManager.info(message, title);\n        }\n    }\n\n    closeResetModal() {\n        this.setState({resetModalOpen: false});\n    }\n    \n    openResetModal() {\n        this.setState({resetModalOpen: true});\n    }\n\n    resetAllData() {\n        this.setState({\n            budget: 0,\n            selectedDate: Date.now(),\n            dates: []\n        });\n        this.closeResetModal();\n        this.createNotification('info', null, \"All transactions have been removed and the current balance has been set to $0.\");\n        this.saveStates();\n    }\n\n    render() {\n        return (\n            <>\n                <NotificationContainer/>\n                <p>\n                    <h1>\n                        Current Balance: {this.getBudgetAmountOnDate(this.state.selectedDate) < 0 ? '-' : ''}\n                        ${Math.abs(this.getBudgetAmountOnDate(this.state.selectedDate))}\n                    </h1>\n                    Selected Date: {getMonthName(this.state.selectedDate)} {getDate(this.state.selectedDate)}, {getYear(this.state.selectedDate)}\n                </p>\n                <InputFields\n                  addTransactionOnSelectedDate={this.addTransactionOnSelectedDate}\n                  changeBudget={this.changeBudget}\n                  createNotification={this.createNotification}\n                />\n                <Grid container justify=\"center\" spacing={0}>\n                    <Grid item xs>\n                    <Calendar\n                        budget={this.state.budget}\n                        selectedDate={this.state.selectedDate}\n                        changeSelectedDate={this.changeSelectedDate}\n                        getBudgetAmountOnDate={this.getBudgetAmountOnDate}\n                        getAddTransactionsOnDate={this.getAddTransactionsOnDate}\n                        getSubTransactionsOnDate={this.getSubTransactionsOnDate}\n                        dates={this.state.dates}\n                        createNotification={this.createNotification}\n                        ref=\"calendar\"\n                    />\n                    </Grid>\n                    <Grid item xs>\n                        <div className=\"transaction\">\n                            <Transaction\n                            increases={this.getAddTransactionsOnDate(this.state.selectedDate)}\n                            decreases={this.getSubTransactionsOnDate(this.state.selectedDate)}\n                            deleteTransactionOnSelectedDate={this.deleteTransactionOnSelectedDate}\n                            createNotification={this.createNotification}\n                            />\n                        </div>\n                    </Grid>\n                </Grid>\n                <div className=\"reset\">\n                    <Button className=\"reset\" color=\"secondary\" onClick={this.openResetModal}>Reset All</Button>\n                </div>\n                <Modal\n                  open={this.state.resetModalOpen}\n                  onClose={this.closeResetModal}\n                >\n                    <div className=\"modal\">\n                        This will remove all transactions and set the initial balance to $0.\n                        <br/>\n                        Are you sure you want to reset?\n                        <br/>\n                        <div style={{marginTop: '10px', textAlign: 'right'}}>\n                            <Button style={{marginRight: '10px'}} variant=\"contained\" onClick={this.closeResetModal}>Cancel</Button>\n                            <Button style={{marginLeft: '10px'}} variant=\"contained\" color=\"secondary\" onClick={this.resetAllData}>Yes, Reset</Button>\n                        </div>\n                    </div>\n                </Modal>\n            </>\n        );\n    };\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}